import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { fetchNewsAsync } from "./action";
import { NewsModel } from "@/types";

export interface NewsState {
    news: NewsModel[];
    status: "idle" | "loading" | "failed";
}

const initialState: NewsState = {
    news: [],
    status: "idle",
};

export const newsSlice = createSlice({
    name: "news",
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchNewsAsync.pending, (state) => {
                state.status = "loading";
            })
            .addCase(fetchNewsAsync.fulfilled, (state, action) => {
                state.status = "idle";
                state.news = action.payload;
            })
            .addCase(fetchNewsAsync.rejected, (state) => {
                state.status = "failed";
            });
    },
});

export default newsSlice.reducer;
